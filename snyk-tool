#!/usr/bin/python3

import requests
import argparse
import configparser
import os

snyk_url = 'https://snyk.io/api/v1'

parser = argparse.ArgumentParser()
parser.add_argument("command", nargs='+', help="\nlist-users, copy-users, compare-users, configure, search-org, create-org, search-prj, delete-prj")
parser.add_argument("-f", "--format", help="format output")
parser.add_argument("-o", "--origin", help="Filter Origin")
parser.add_argument("-n", "--name", help="Filter Name")
parser.add_argument("-d", "--delete", help="Filter Name")


args = parser.parse_args()

def usage():
    print(f"USAGE: \
        \n    {parser.prog} list-users org_id [-f] all|json\t\t\t\tList users from org_id \
        \n    {parser.prog} copy-users src dst\t\t\t\t\tCopy Users from org src to org dst \
        \n    {parser.prog} compare-users [src] [dst] -f all\t\t\t\tCompare user list from org src and dst \
        \n    {parser.prog} search-org [name] \t\t\t\t\tSearch org by name \
        \n    {parser.prog} create-org [org_name] \t\t\t\t\tCreate a new org with name [org_name]\
        \n    {parser.prog} search-prj [org_id] [-o] origin [-n] name [-f] fmt\tSearch a project in the org\
        \n    {parser.prog} delete-prj [org_id] [prj_id]\t\t\t\tDelete project [prj_id] in the org [org_id]]\
        \n    {parser.prog} prj-issues [org_id] [prj_id]\t\t\t\tGet aggregated issue for [prj_id] in the org [org_id]]\
        \n    {parser.prog} configure\t\t\t\t ")


if args.command[0] == 'list-users':
    if len(args.command) != 2:
        usage()
        quit()
    if args.format != None:
        if args.format != 'all' and args.format != 'json':
            usage()
            quit()
if args.command[0] == 'search-prj':
    if len(args.command) != 2:
        usage()
        quit()
    if args.format != None:
        if args.format != 'q' and args.format != 'all' and args.format != 'simple':
            usage()
            quit()
if args.command[0] == 'search-orgs' or args.command[0] == 'create-org':
    if len(args.command) != 2:
        usage()
        quit()
if args.command[0] == 'copy-users' or args.command[0] == 'compare-users' or args.command[0] == 'delete-prj' or args.command[0] == 'prj-issues':
    if len(args.command) != 3:
        usage()
        quit()

def read_conf():
    home = os.path.expanduser('~')
    file = home + '/.snyk-users.conf'
    config = configparser.ConfigParser()
    config.read(file)
    return config

def configure():
    home = os.path.expanduser('~')
    file = home + '/.snyk-users.conf'
    config = configparser.ConfigParser()
    config.read(file)
        
    if 'group_token' in config['DEFAULT']:
        gt = config['DEFAULT']['group_token'][-4:]
        group_token = input(f"Group Token [...{gt}]: ")
    else: 
        group_token = input(f"Group Token []: ")
    if 'group_id' in config['DEFAULT']:
        gi = config['DEFAULT']['group_id'][-4:]
        group_id = input(f"Group id [...{gi}]: ")
    else:
        group_id = input("Group Id: ")
    if group_token != '':
        config['DEFAULT']['group_token'] = group_token
    if group_id != '':
        config['DEFAULT']['group_id'] =  group_id
    with open(file, 'w') as configfile:
        config.write(configfile)


def list_users(org, fmt='q'):
    conf = read_conf()
    url = snyk_url + '/org/' + org + '/members'
    headers = {'Authorization': 'token ' + conf['DEFAULT']['group_token']}
    res = requests.get(url, headers=headers)
    if res.status_code != 200:
        print("Error: " + res.text)
        return False
    if fmt == 'json':
        print(res.json())
        return True
    elif fmt == 'all':
        for u in res.json():
            print(f"{u['id']} {u['role']} {u['username']} {u['name']} ")
    else:
        for u in res.json():
            print(f"{u['username']} {u['role']}")
        
    return True

def diff_users(src, dst):
    conf = read_conf()
    url = snyk_url + '/org/' + src + '/members'
    headers = {'Authorization': 'token ' + conf['DEFAULT']['group_token']}
    res = requests.get(url, headers=headers)
    if res.status_code != 200:
        print("Error: " + res.text)
        return False
    users_src = res.json()

    url = snyk_url + '/org/' + dst + '/members'
    res = requests.get(url, headers=headers)
    if res.status_code != 200:
        print("Error: " + res.text)
        return False
    users_dst = res.json()

    src_list = [ users_src[i]['name'] for i in range(len(users_src)) ]
    dst_list = [ users_dst[i]['name'] for i in range(len(users_dst)) ]
    
    column_2_size = 10
    column_1_size = len(src)

    # get the longest list
    if len(src) >= len(dst):
        l1 , l2 = sorted(src_list), sorted(dst_list)
    else:
        l1, l2 = sorted(dst_list), sorted(src_list)

    # create a set with all
    s1 = {l1[i] for i in range(len(l1))}
    s2 = {l2[i] for i in range(len(l2))}
    all = s1 | s2

    # print header
    out = src
    out += column_2_size * ' '
    out += dst + '\n'
    out += len(src) * '-'
    out += column_2_size * ' '
    out += len(dst) * '-'
    out += '\n'
    
    missing_str = '--> MISSING <--'
    for i in sorted(all):
        if i in l1:
            out += i
            filler_size = (column_1_size + column_2_size) - len(i)
        else:
            out += missing_str
            filler_size = (column_1_size + column_2_size) - len(missing_str)
        out += filler_size * ' '
        if i in l2:
            out += i
        else:
            out += missing_str
        out += '\n'

    print(out)

def copy_users(src, dst):
    # get list of users from org_src
    # for each user... 
    # POST add member to org_dst
    conf = read_conf()
    url = snyk_url + '/org/' + src + '/members'
    headers = {'Authorization': 'token ' + conf['DEFAULT']['group_token']}
    res = requests.get(url, headers=headers)
    if res.status_code != 200:
        print("Error: " + res.text)
        return False
    users = res.json()
    headers['Content-Type'] = 'application/json'
    fail = False
    print(f"Going to copy users from {src} to {dst}")
    group_id = conf['DEFAULT']['group_id']
    for u in users:
        url = snyk_url + '/group/' + group_id + '/org/' + dst + '/members'
        payload = {'userId': u['id'], 'role': 'collaborator'}
        res = requests.post(url, headers=headers, json=payload)
        if res.status_code != 200:
            print("Error: " + res.text)
            fail = True
        else:
            print("Added " + u['username'])
    
    return not fail

def search_org(name):
    conf = read_conf()
    url = snyk_url + '/orgs'
    headers = {'Authorization': 'token ' + conf['DEFAULT']['group_token']}
    res = requests.get(url, headers=headers)
    if res.status_code != 200:
        print("Error: " + res.text)
        return False
    out = ''
    for o in res.json()['orgs']:
        if name.lower() in o['name'].lower():
            out += o['id'] + '\t\t' + o['name'] + '\n'

    print(out)
    
def create_org(name):
    conf = read_conf()
    url = snyk_url + '/group/' + conf['DEFAULT']['group_id'] + '/org'
    headers = {
        'Authorization': 'token ' + conf['DEFAULT']['group_token'], 
        'Content-Type': 'application/json'
    }

    payload = {'name': name}
    res = requests.post(url, headers=headers, json=payload)
    if res.status_code != 200:
        print("Error: " + res.text)
        return False
    print("ID: " + res.json()['id'])


def search_projects(org, fmt='simple', origin='', name='', delete=False):
    conf = read_conf()
    url = snyk_url + '/group/' + conf['DEFAULT']['group_id'] + '/org'
    headers = {
        'Authorization': 'token ' + conf['DEFAULT']['group_token']
    }
    url = snyk_url + '/org/' + org + '/projects'
    res = requests.get(url, headers=headers)
    if res.status_code != 200:
        print("Error: " + res.text)
        return False
    projects = res.json()['projects']

    # filters
    filtered = []
    for p in projects:
        if origin != '' and name != '':
            if p['origin'].lower() == origin.lower() and name.lower() in p['name'].lower():
                filtered.append(p)
        elif origin != '' and name == '':
            if p['origin'].lower() == origin.lower():
                filtered.append(p)
        elif origin == '' and name != '':
            if name.lower() in p['name'].lower():
                filtered.append(p)
        else:
            filtered.append(p)

    # no need to format    
    if delete:
        for p in filtered:
            delete_prj(org, p['id'])
        return True

    # format
    out = ''
    for p in filtered:
        if fmt == 'simple':
            out += p['id'] + '\t' + p['name'] + '\n'
        elif fmt == 'q':
            out += p['id'] + '\n'
        elif fmt == 'all':
            out += p['id'] + '\t' + p['created'] + '\t' + p['origin'] + '\t\t' + p['name'] + '\n'
    
    print(out)

def delete_prj(org, prj):
    conf = read_conf()
    url = snyk_url + '/group/' + conf['DEFAULT']['group_id'] + '/org'
    headers = {
        'Authorization': 'token ' + conf['DEFAULT']['group_token']
    }
    url = snyk_url + '/org/' + org + '/project/' + prj
    res = requests.delete(url, headers=headers)
    if res.status_code != 200:
        print("Error: " + res.text)
        return False
    print(prj + " DELETED")

def project_issues(org, prj):
    conf = read_conf()
    url = snyk_url + '/group/' + conf['DEFAULT']['group_id'] + '/org'
    headers = {
        'Authorization': 'token ' + conf['DEFAULT']['group_token'],
        'Content-Type' : 'application/json'
    }
    url = snyk_url + '/org/' + org + '/project/' + prj + '/aggregated-issues'
    res = requests.post(url, headers=headers)
    if res.status_code != 200:
        print("Error: " + res.text)
        return False
    h = 0
    m = 0
    l = 0
    u = 0
    for i in res.json()['issues']:
        if i['issueData']['severity'] == 'high':
            h += 1
        elif i['issueData']['severity'] == 'medium':
            m += 1
        elif i['issueData']['severity'] == 'low':
            l += 1
        else:
            u += 1
    out = 'High: ' + str(h) + '\nMedium: ' + str(m) + '\nLow: ' + str(l)
    if u > 0:
        out += '\nUnknown: ' + str(u)
    print(out)



if args.command[0] == 'list-users':
    if args.format == None:
        fmt = 'q'
    else:
        fmt = args.format
    list_users(args.command[1], fmt=fmt)
elif args.command[0] == 'copy-users':
    copy_users(args.command[1], args.command[2])
elif args.command[0] == 'compare-users':
    diff_users(args.command[1], args.command[2])
elif args.command[0] == 'search-org':
    search_org(args.command[1])
elif args.command[0] == 'create-org':
    create_org(args.command[1])
elif args.command[0] == 'delete-prj':
    delete_prj(args.command[1], args.command[2])
elif args.command[0] == 'prj-issues':
    project_issues(args.command[1], args.command[2])
elif args.command[0] == 'search-prj':
    if args.format == None:
        fmt = 'simple'
    else:
        fmt = args.format
    if args.origin == None:
        origin = ''
    else:
        origin = args.origin
    if args.name == None:
        name = ''
    else:
        name = args.name
    delete = False
    if args.delete == 'true':
        delete = True
    search_projects(args.command[1], fmt, origin, name, delete)
elif args.command[0] ==  'configure':
    configure()
else:
    usage()


